import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.ensemble import RandomForestClassifier
from lightgbm import LGBMClassifier
from sklearn.datasets import make_classification
from sklearn.model_selection import train_test_split
from sklearn.metrics import (
    accuracy_score,
    confusion_matrix,
    roc_curve,
    auc
)
import time

# 1.数据集
X, y = make_classification(
    n_samples=10000,        # 样本数量
    n_features=20,          # 特征数
    n_informative=15,       # 有信息特征
    n_redundant=5,          # 冗余特征
    n_classes=2,            # 二分类
    random_state=42
)

# 数据集划分
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.3, random_state=42
)

# 2.训练模型 & 记录耗时
rf_model = RandomForestClassifier(n_estimators=100, n_jobs=-1, random_state=42)
lgb_model = LGBMClassifier(n_estimators=100, n_jobs=-1, random_state=42)

# 训练 Random Forest
start_time = time.time()
rf_model.fit(X_train, y_train)
rf_train_time = time.time() - start_time

# 训练 LightGBM
start_time = time.time()
lgb_model.fit(X_train, y_train)
lgb_train_time = time.time() - start_time

# 3.模型预测 & 性能评估
rf_pred = rf_model.predict(X_test)
lgb_pred = lgb_model.predict(X_test)

rf_acc = accuracy_score(y_test, rf_pred)
lgb_acc = accuracy_score(y_test, lgb_pred)

# 获取预测概率用于绘制ROC曲线
rf_prob = rf_model.predict_proba(X_test)[:, 1]
lgb_prob = lgb_model.predict_proba(X_test)[:, 1]

# 计算 ROC 曲线
rf_fpr, rf_tpr, _ = roc_curve(y_test, rf_prob)
lgb_fpr, lgb_tpr, _ = roc_curve(y_test, lgb_prob)
rf_auc = auc(rf_fpr, rf_tpr)
lgb_auc = auc(lgb_fpr, lgb_tpr)

# 特征重要性
rf_importance = rf_model.feature_importances_
lgb_importance = lgb_model.feature_importances_

# 4.绘制分析图表（4合1图）
plt.figure(figsize=(18, 12))
sns.set(style="whitegrid", palette="bright", font_scale=1.2)

# 图1：训练时间对比
plt.subplot(2, 2, 1)
plt.bar(["Random Forest", "LightGBM"], [rf_train_time, lgb_train_time], color=['#FF6F61', '#6B5B95'])
plt.title("Training Time Comparison")
plt.ylabel("Time (Seconds)")
plt.xlabel("Model")

# 图2：模型准确率
plt.subplot(2, 2, 2)
plt.bar(["Random Forest", "LightGBM"], [rf_acc, lgb_acc], color=['#88B04B', '#F7CAC9'])
plt.title("Model Accuracy Comparison")
plt.ylabel("Accuracy")
plt.xlabel("Model")

# 图3：ROC曲线
plt.subplot(2, 2, 3)
plt.plot(rf_fpr, rf_tpr, label=f"Random Forest (AUC={rf_auc:.2f})", color='#92A8D1', linewidth=2)
plt.plot(lgb_fpr, lgb_tpr, label=f"LightGBM (AUC={lgb_auc:.2f})", color='#955251', linewidth=2)
plt.plot([0, 1], [0, 1], 'k--', label="Random Classifier")
plt.title("ROC Curve")
plt.xlabel("False Positive Rate")
plt.ylabel("True Positive Rate")
plt.legend(loc="lower right")

# 图4：Top 10 特征重要性
plt.subplot(2, 2, 4)
top_n = 10
indices = np.argsort(rf_importance)[-top_n:]
bar_width = 0.35
plt.barh(np.arange(top_n), rf_importance[indices], height=bar_width, label='Random Forest', color='#FF7F50')
plt.barh(np.arange(top_n) + bar_width, lgb_importance[indices], height=bar_width, label='LightGBM', color='#4682B4')
plt.yticks(np.arange(top_n) + bar_width / 2, [f"Feature {i}" for i in indices])
plt.xlabel("Feature Importance")
plt.title("Top 10 Feature Importances")
plt.legend()

plt.tight_layout()
plt.suptitle("随机森林 vs LightGBM：训练效率与模型性能对比", fontsize=22, y=1.03)
plt.show()
